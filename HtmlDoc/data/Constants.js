const constants =
  {
    names:
      [
        'ecb--cedet-function-list',
        'ecb--semantic-format-function-alist',
        'ecb--semantic-format-function-list',
        'ecb--semantic-function-alist',
        'ecb--semanticdb-function-alist',
        'ecb-analyse-nodedata-no-tag',
        'ecb-analyse-nodedata-tag-with-pos',
        'ecb-autogen-file',
        'ecb-autogen-header',
        'ecb-autoload-feature',
        'ecb-buildin-layouts',
        'ecb-cedet-lib-registry',
        'ecb-cedet-missing-libraries',
        'ecb-cedet-old-sourcetree-structure-detected-p',
        'ecb-cedet-required-version-min',
        'ecb-compiled-in-cedet-version',
        'ecb-compiled-in-semantic-version',
        'ecb-create-layout-buf-prefix',
        'ecb-create-layout-file-header',
        'ecb-create-layout-help-text-left-right',
        'ecb-create-layout-help-text-top',
        'ecb-directories-nodetype-directory',
        'ecb-directory-sep-char',
        'ecb-ecb-dir',
        'ecb-ecb-parent-dir',
        'ecb-examples-action-buffer-name',
        'ecb-examples-bufferinfo-buffer-name',
        'ecb-help-html-subdir',
        'ecb-help-info-start-file',
        'ecb-layout-option-set-function',
        'ecb-methods-nodetype-externtag',
        'ecb-methods-nodetype-tag',
        'ecb-speedbar-buffer-name',
        'ecb-symboldef-temp-buffer-name',
        'ecb-temp-dir',
        'ecb-tod-tip-list',
        'ecb-upgradable-option-alist',
        'ecb-upgrade-news',
        'ecb-vc-incr-searchpattern-node-prefix',
        'ecb-vc-state-icon-alist',
        'ecb-version',
        'ecb-windows-hidden-all-value',
        'ecb-windows-hidden-none-value',
        'tree-node-id-init-value'
    ],

    info:
      [
        {
          constant : 'ecb--cedet-function-list',
          filename : 'ecb-cedet-wrapper.el',
          lispcode : '(defconst ecb--cedet-function-list<br>  <tick>(<br>    semantic--format-colorize-text<br>    semantic--tag-get-property<br>    semantic--tag-overlay-cdr<br>    semantic--tag-put-property<br>    semantic--tag-set-overlay<br>    semantic-active-p<br>    semantic-adopt-external-members<br>    semantic-analyze-current-context<br>    semantic-analyze-find-tag<br>    semantic-analyze-possible-completions<br>    semantic-analyze-tag-type<br>    semantic-brute-find-first-tag-by-name<br>    semantic-bucketize<br>    semantic-c-template-string<br>    semantic-calculate-scope<br>    semantic-clear-toplevel-cache<br>    semantic-current-tag<br>    semantic-current-tag-parent<br>    semantic-dependency-tag-file<br>    semantic-documentation-for-tag<br>    semantic-equivalent-tag-p<br>    semantic-fetch-available-tags<br>    semantic-fetch-tags<br>    semantic-find-tag-by-overlay<br>    semantic-find-tags-by-class<br>    semantic-find-tags-by-name<br>    semantic-flatten-tags-table<br>    semantic-get-local-arguments<br>    semantic-go-to-tag<br>    semantic-lex-token-start<br>    semantic-overlay-live-p<br>    semantic-overlay-p<br>    semantic-something-to-tag-table<br>    semantic-tag<br>    semantic-tag-abstract-p<br>    semantic-tag-bounds<br>    semantic-tag-buffer<br>    semantic-tag-calculate-parent<br>    semantic-tag-children-compatibility<br>    semantic-tag-class<br>    semantic-tag-components<br>    semantic-tag-components-with-overlays<br>    semantic-tag-end<br>    semantic-tag-faux-p<br>    semantic-tag-function-arguments<br>    semantic-tag-function-constructor-p<br>    semantic-tag-function-destructor-p<br>    semantic-tag-function-parent<br>    semantic-tag-get-attribute<br>    semantic-tag-name<br>    semantic-tag-named-parent<br>    semantic-tag-new-variable<br>    semantic-tag-overlay<br>    semantic-tag-p<br>    semantic-tag-protection<br>    semantic-tag-prototype-p<br>    semantic-tag-start<br>    semantic-tag-static-p<br>    semantic-tag-type<br>    semantic-tag-type-interfaces<br>    semantic-tag-type-members<br>    semantic-tag-type-superclasses<br>    semantic-tag-with-position-p<br>    semanticdb-brute-deep-find-tags-by-name<br>    semanticdb-deep-find-tags-by-name<br>    semanticdb-find-result-length<br>    semanticdb-find-result-nth<br>    semanticdb-find-tags-by-name<br>    semanticdb-full-filename<br>    semanticdb-minor-mode-p<br>    semanticdb-strip-find-results<br>    )<br>)'
        },
        {
          constant : 'ecb--semantic-format-function-alist',
          filename : 'ecb-semantic-wrapper.el',
          docstring : '"Alist where the car is a function of semantic 1.X and the cdr is the<br>equivalent new function of semantic 2.X. This alist should contain every<br>function of `semantic-token->text-functions" (rsp. for semantic 2.X<br>`semantic-format-tag-functions".")<br><br>(defconst ecb--semanticdb-function-alist<br>  "((semanticdb-minor-mode-p             . semanticdb-minor-mode-p)<br>    (semanticdb-full-filename            . semanticdb-full-filename))<br>  "Alist where the car is a function of semanticdb 1.X and the cdr is the<br>equivalent new function of semanticdb 2.X. This alist should contain every<br>function ECB uses from the semanticdb library.")<br><br>;; new let us create the aliase. Each alias has the name "ecb--"<function of<br>;; semantic 2.0>.<br>(dolist (f-elem (append ecb--semantic-function-alist<br>                        ecb--semantic-format-function-alist<br>                        ecb--semanticdb-function-alist))<br>  (defalias (intern (concat "ecb--" (symbol-name (cdr f-elem))))<br>    (if (fboundp (cdr f-elem))<br>        (cdr f-elem)<br>      (car f-elem))))<br><br><br>(defsubst ecb--semantic-tag (name class &rest ignore)<br>  "Create a new semantic tag with name NAME and tag-class CLASS."',
          prototype : '(defconst ecb--semantic-format-function-alist  "((semantic-name-nonterminal                  . semantic-format-tag-name)    (semantic-abbreviate-nonterminal            . semantic-format-tag-abbreviate)    (semantic-summarize-nonterminal             . semantic-format-tag-summarize)    (semantic-prototype-nonterminal             . semantic-format-tag-prototype)    (semantic-concise-prototype-nonterminal     . semantic-format-tag-concise-prototype)    (semantic-uml-abbreviate-nonterminal        . semantic-format-tag-uml-abbreviate)    (semantic-uml-prototype-nonterminal         . semantic-format-tag-uml-prototype)    (semantic-uml-concise-prototype-nonterminal . semantic-format-tag-uml-concise-prototype)    (semantic-prin1-nonterminal                 . semantic-format-tag-prin1))',
          lispcode : '(defconst ecb--semantic-format-function-alist<br>  <tick>((semantic-name-nonterminal                  . semantic-format-tag-name)<br>    (semantic-abbreviate-nonterminal            . semantic-format-tag-abbreviate)<br>    (semantic-summarize-nonterminal             . semantic-format-tag-summarize)<br>    (semantic-prototype-nonterminal             . semantic-format-tag-prototype)<br>    (semantic-concise-prototype-nonterminal     . semantic-format-tag-concise-prototype)<br>    (semantic-uml-abbreviate-nonterminal        . semantic-format-tag-uml-abbreviate)<br>    (semantic-uml-prototype-nonterminal         . semantic-format-tag-uml-prototype)<br>    (semantic-uml-concise-prototype-nonterminal . semantic-format-tag-uml-concise-prototype)<br>    (semantic-prin1-nonterminal                 . semantic-format-tag-prin1))'
        },
        {
          constant : 'ecb--semantic-format-function-list',
          filename : 'ecb-cedet-wrapper.el',
          lispcode : '(defconst ecb--semantic-format-function-list<br>  <tick>(<br>    semantic-format-tag-abbreviate<br>    semantic-format-tag-concise-prototype<br>    semantic-format-tag-name<br>    semantic-format-tag-prin1<br>    semantic-format-tag-prototype<br>    semantic-format-tag-summarize<br>    semantic-format-tag-uml-abbreviate<br>    semantic-format-tag-uml-concise-prototype<br>    semantic-format-tag-uml-prototype<br>    ))'
        },
        {
          constant : 'ecb--semantic-function-alist',
          filename : 'ecb-semantic-wrapper.el',
          docstring : '  "Alist where the car is a function of semantic 1.X and the cdr is the<br>equivalent new function of semantic 2.X. This alist should contain every<br>function ECB uses from the semantic library.")<br><br>(defconst ecb--semantic-format-function-alist<br>  "((semantic-name-nonterminal                  . semantic-format-tag-name)<br>    (semantic-abbreviate-nonterminal            . semantic-format-tag-abbreviate)<br>    (semantic-summarize-nonterminal             . semantic-format-tag-summarize)<br>    (semantic-prototype-nonterminal             . semantic-format-tag-prototype)<br>    (semantic-concise-prototype-nonterminal     . semantic-format-tag-concise-prototype)<br>    (semantic-uml-abbreviate-nonterminal        . semantic-format-tag-uml-abbreviate)<br>    (semantic-uml-prototype-nonterminal         . semantic-format-tag-uml-prototype)<br>    (semantic-uml-concise-prototype-nonterminal . semantic-format-tag-uml-concise-prototype)<br>    (semantic-prin1-nonterminal                 . semantic-format-tag-prin1))<br>"Alist where the car is a function of semantic 1.X and the cdr is the<br>equivalent new function of semantic 2.X. This alist should contain every<br>function of `semantic-token->text-functions" (rsp. for semantic 2.X<br>`semantic-format-tag-functions".")<br><br>(defconst ecb--semanticdb-function-alist<br>  "((semanticdb-minor-mode-p             . semanticdb-minor-mode-p)<br>    (semanticdb-full-filename            . semanticdb-full-filename))<br>  "Alist where the car is a function of semanticdb 1.X and the cdr is the<br>equivalent new function of semanticdb 2.X. This alist should contain every<br>function ECB uses from the semanticdb library.")<br><br>;; new let us create the aliase. Each alias has the name "ecb--"<function of<br>;; semantic 2.0>.<br>(dolist (f-elem (append ecb--semantic-function-alist<br>                        ecb--semantic-format-function-alist<br>                        ecb--semanticdb-function-alist))<br>  (defalias (intern (concat "ecb--" (symbol-name (cdr f-elem))))<br>    (if (fboundp (cdr f-elem))<br>        (cdr f-elem)<br>      (car f-elem))))<br><br><br>(defsubst ecb--semantic-tag (name class &rest ignore)<br>  "Create a new semantic tag with name NAME and tag-class CLASS."',
          prototype : '(defconst ecb--semantic-function-alist  "((semantic-active-p                        . semantic-active-p)    (semantic-token-function-args             . semantic-tag-function-arguments)    (semantic-token-type-parts                . semantic-tag-type-members)    (semantic-something-to-stream             . semantic-something-to-tag-table)    (semantic-find-nonterminal-by-overlay     . semantic-find-tag-by-overlay)    ;; here both functions return a list of tags!    (semantic-find-nonterminal-by-token       . semantic-find-tags-by-class)    (semantic-find-nonterminal-by-name        . semantic-brute-find-first-tag-by-name)    (semantic-current-nonterminal-parent      . semantic-current-tag-parent)    (semantic-find-nonterminal                . semantic-go-to-tag)    (semantic-adopt-external-members          . semantic-adopt-external-members)    (semantic-bucketize                       . semantic-bucketize)    (semantic-clear-toplevel-cache            . semantic-clear-toplevel-cache)    (semantic-colorize-text                   . semantic--format-colorize-text)    (semantic-current-nonterminal             . semantic-current-tag)    (semantic-equivalent-tokens-p             . semantic-equivalent-tag-p)    (semantic-find-dependency                 . semantic-dependency-tag-file)    (semantic-find-documentation              . semantic-documentation-for-tag)    (semantic-flex-start                      . semantic-lex-token-start)    (semantic-nonterminal-children            . semantic-tag-children-compatibility)    (semantic-nonterminal-protection          . semantic-tag-protection)    (semantic-overlay-live-p                  . semantic-overlay-live-p)    (semantic-overlay-p                       . semantic-overlay-p)    (semantic-token-buffer                    . semantic-tag-buffer)    (semantic-token-end                       . semantic-tag-end)    (semantic-token-extra-spec                . semantic-tag-get-attribute)    (semantic-token-function-parent           . semantic-tag-function-parent)    (semantic-token-get                       . semantic--tag-get-property)    (semantic-token-name                      . semantic-tag-name)    (semantic-token-overlay                   . semantic-tag-overlay)    (semantic-token-overlay-cdr               . semantic--tag-overlay-cdr)    (semantic-token-p                         . semantic-tag-p)    (semantic-token-put                       . semantic--tag-put-property)    (semantic-token-start                     . semantic-tag-start)    (semantic-token-token                     . semantic-tag-class)    (semantic-token-type                      . semantic-tag-type)    (semantic-token-type-parent-superclass    . semantic-tag-type-superclass)    (semantic-token-type-parent-implement     . semantic-tag-type-interfaces)    (semantic-token-with-position-p           . semantic-tag-with-position-p)    (semantic-analyze-current-context         . semantic-analyze-current-context)    (semantic-analyze-possible-completions    . semantic-analyze-possible-completions)    (semantic-get-local-arguments             . semantic-get-local-arguments)    (semantic-analyze-token-type              . semantic-analyze-tag-type))',
          lispcode : '(defconst ecb--semantic-function-alist<br>  <tick>((semantic-active-p                        . semantic-active-p)<br>    (semantic-token-function-args             . semantic-tag-function-arguments)<br>    (semantic-token-type-parts                . semantic-tag-type-members)<br>    (semantic-something-to-stream             . semantic-something-to-tag-table)<br>    (semantic-find-nonterminal-by-overlay     . semantic-find-tag-by-overlay)<br>    ;; here both functions return a list of tags!<br>    (semantic-find-nonterminal-by-token       . semantic-find-tags-by-class)<br>    (semantic-find-nonterminal-by-name        . semantic-brute-find-first-tag-by-name)<br>    (semantic-current-nonterminal-parent      . semantic-current-tag-parent)<br>    (semantic-find-nonterminal                . semantic-go-to-tag)<br>    (semantic-adopt-external-members          . semantic-adopt-external-members)<br>    (semantic-bucketize                       . semantic-bucketize)<br>    (semantic-clear-toplevel-cache            . semantic-clear-toplevel-cache)<br>    (semantic-colorize-text                   . semantic--format-colorize-text)<br>    (semantic-current-nonterminal             . semantic-current-tag)<br>    (semantic-equivalent-tokens-p             . semantic-equivalent-tag-p)<br>    (semantic-find-dependency                 . semantic-dependency-tag-file)<br>    (semantic-find-documentation              . semantic-documentation-for-tag)<br>    (semantic-flex-start                      . semantic-lex-token-start)<br>    (semantic-nonterminal-children            . semantic-tag-children-compatibility)<br>    (semantic-nonterminal-protection          . semantic-tag-protection)<br>    (semantic-overlay-live-p                  . semantic-overlay-live-p)<br>    (semantic-overlay-p                       . semantic-overlay-p)<br>    (semantic-token-buffer                    . semantic-tag-buffer)<br>    (semantic-token-end                       . semantic-tag-end)<br>    (semantic-token-extra-spec                . semantic-tag-get-attribute)<br>    (semantic-token-function-parent           . semantic-tag-function-parent)<br>    (semantic-token-get                       . semantic--tag-get-property)<br>    (semantic-token-name                      . semantic-tag-name)<br>    (semantic-token-overlay                   . semantic-tag-overlay)<br>    (semantic-token-overlay-cdr               . semantic--tag-overlay-cdr)<br>    (semantic-token-p                         . semantic-tag-p)<br>    (semantic-token-put                       . semantic--tag-put-property)<br>    (semantic-token-start                     . semantic-tag-start)<br>    (semantic-token-token                     . semantic-tag-class)<br>    (semantic-token-type                      . semantic-tag-type)<br>    (semantic-token-type-parent-superclass    . semantic-tag-type-superclass)<br>    (semantic-token-type-parent-implement     . semantic-tag-type-interfaces)<br>    (semantic-token-with-position-p           . semantic-tag-with-position-p)<br>    (semantic-analyze-current-context         . semantic-analyze-current-context)<br>    (semantic-analyze-possible-completions    . semantic-analyze-possible-completions)<br>    (semantic-get-local-arguments             . semantic-get-local-arguments)<br>    (semantic-analyze-token-type              . semantic-analyze-tag-type))'
        },
        {
          constant : 'ecb--semanticdb-function-alist',
          filename : 'ecb-semantic-wrapper.el',
          docstring : '  "Alist where the car is a function of semanticdb 1.X and the cdr is the<br>equivalent new function of semanticdb 2.X. This alist should contain every<br>function ECB uses from the semanticdb library.")<br><br>;; new let us create the aliase. Each alias has the name "ecb--"<function of<br>;; semantic 2.0>.<br>(dolist (f-elem (append ecb--semantic-function-alist<br>                        ecb--semantic-format-function-alist<br>                        ecb--semanticdb-function-alist))<br>  (defalias (intern (concat "ecb--" (symbol-name (cdr f-elem))))<br>    (if (fboundp (cdr f-elem))<br>        (cdr f-elem)<br>      (car f-elem))))<br><br><br>(defsubst ecb--semantic-tag (name class &rest ignore)<br>  "Create a new semantic tag with name NAME and tag-class CLASS."',
          prototype : '(defconst ecb--semanticdb-function-alist  "((semanticdb-minor-mode-p             . semanticdb-minor-mode-p)    (semanticdb-full-filename            . semanticdb-full-filename))',
          lispcode : '(defconst ecb--semanticdb-function-alist<br>  <tick>((semanticdb-minor-mode-p             . semanticdb-minor-mode-p)<br>    (semanticdb-full-filename            . semanticdb-full-filename))'
        },
        {
          constant : 'ecb-analyse-nodedata-no-tag',
          filename : 'ecb-analyse.el',
          lispcode : '(defconst ecb-analyse-nodedata-no-tag 2)'
        },
        {
          constant : 'ecb-analyse-nodedata-tag-with-pos',
          filename : 'ecb-analyse.el',
          lispcode : '(defconst ecb-analyse-nodedata-tag-with-pos 0)<br>(defconst ecb-analyse-nodedata-tag-without-pos 1)<br>(defconst ecb-analyse-nodedata-no-tag 2)'
        },
        {
          constant : 'ecb-autogen-file',
          filename : 'ecb-autogen.el',
          lispcode : '(defconst ecb-autogen-file <apo>ecb-autoloads.el<apo><br>  <apo>Name of the auto-generated autoloads file.<apo>)'
        },
        {
          constant : 'ecb-autogen-header',
          filename : 'ecb-autogen.el',
          docstring : '  "Auto-generated ecb autoloads"',
          prototype : '(defconst ecb-autogen-header',
          lispcode : '(defconst ecb-autogen-header<br>  <apo>Header of the auto-generated autoloads file.<apo>)'
        },
        {
          constant : 'ecb-autoload-feature',
          filename : 'ecb-autogen.el',
          lispcode : '(defconst ecb-autoload-feature <apo>ecb-autoloads<apo><br>  <apo>Feature-name of the autoloads<apo>)'
        },
        {
          constant : 'ecb-buildin-layouts',
          filename : 'ecb-layout-defs.el',
          lispcode : '(defconst ecb-buildin-layouts (ecb-copy-list ecb-available-layouts)<br>  <apo>All layouts defined until now.<apo>)'
        },
        {
          constant : 'ecb-cedet-lib-registry',
          filename : 'ecb-cedet-wrapper.el',
          docstring : '  "Maps the old library-structure of cedet to the equivalent libs<br>of Emacs >= 23.2. The value is an assoc list where the car is the<br>lib-symbol of an old-style cedet-library and the cdr is the<br>corresponding lib-symbol of the new style library (as with the<br>cedet-suite integrated into Emacs >= 23.2).<br><br>ALL CEDET-LIBRARIES NEEDED BY ECB MUST BE REGISTERED HERE!")<br><br>(defconst ecb-cedet-required-version-min "(1 0 2 6)<br>  "Minimum version of cedet needed by ECB.<br>The meaning is as follows:<br>1. Major-version<br>2. Minor-version<br>3. 0 = alpha, 1 = beta, 2 = pre, 3 = nothing (e.g. "1.4"), 4 = . (e.g. "1.4.3"<br>4. Subversion after the alpha, beta, pre or .")<br><br>;; The constraint on a max version of ECB has been removed.<br><br>(defun ecb-cedet-missing-libs ()<br>  "Return a list of names of missing cedet-libs.<br>If no cedet libs are missing nil is returned."',
          prototype : '(defconst ecb-cedet-lib-registry "((cedet . cedet)                                   (semantic . semantic)                                   (semantic-ctxt . semantic/ctxt)                                   (semantic-analyze . semantic/analyze)                                   (semanticdb . semantic/db)                                   (semanticdb-find . semantic/db-find)                                   (semanticdb-mode . semantic/db-mode)                                   (semantic-el . semantic/bovine/el)                                   (eieio . eieio)                                   (speedbar . speedbar))',
          lispcode : '(defconst ecb-cedet-lib-registry <tick>((cedet . cedet)<br>                                   (semantic . semantic)<br>                                   (semantic-ctxt . semantic/ctxt)<br>                                   (semantic-analyze . semantic/analyze)<br>                                   (semanticdb . semantic/db)<br>                                   (semanticdb-find . semantic/db-find)<br>                                   (semanticdb-mode . semantic/db-mode)<br>                                   (semantic-el . semantic/bovine/el)<br>                                   (eieio . eieio)<br>                                   (speedbar . speedbar))'
        },
        {
          constant : 'ecb-cedet-missing-libraries',
          filename : 'ecb-cedet-wrapper.el',
          docstring : '  "List of library-names of CEDET missed by ECB.<br>Nil if all libs needed by ECB are found.")<br><br>(unless ecb-cedet-missing-libraries<br>  (ecb-cedet-require "semantic)<br>  (ecb-cedet-require "semantic-ctxt)<br>  (ecb-cedet-require "semantic-analyze)<br>  (ecb-cedet-require "semanticdb)<br>  (ecb-cedet-require "semanticdb-find)<br>  (ecb-cedet-require "semanticdb-mode)<br>  (ecb-cedet-require "eieio))<br><br>(defconst ecb-compiled-in-semantic-version<br>  (eval-when-compile (ignore-errors semantic-version))<br>  "Semantic-version used for byte-compiling ECB. Either nil when no semantic<br>is loaded or the value of `semantic-version" at ECB-compilation time.")<br><br>(defconst ecb-compiled-in-cedet-version<br>  (eval-when-compile (ignore-errors cedet-version))<br>  "Cedet-version used for byte-compiling ECB. Either nil when no semantic<br>is loaded or the value of `cedet-version" at ECB-compilation time.")<br><br>(defun ecb-check-semantic-load ()<br>  "Checks if cedet is correctly loaded if semantic 2.X is used and if the same<br>semantic-version has been used for byte-compiling ECB and loading into Emacs.<br>If ECB detects a problem it is reported and then an error is thrown."',
          prototype : '(defconst ecb-cedet-missing-libraries  (ecb-cedet-missing-libs)',
          lispcode : '(defconst ecb-cedet-missing-libraries<br>  (ecb-cedet-missing-libs)'
        },
        {
          constant : 'ecb-cedet-old-sourcetree-structure-detected-p',
          filename : 'ecb-cedet-wrapper.el',
          lispcode : '(defconst ecb-cedet-old-sourcetree-structure-detected-p<br>  (locate-library <apo>semantic-ctxt<apo>)<br>  <apo>Not nil if old cedet sourcetree-structure is detected.<apo>)'
        },
        {
          constant : 'ecb-cedet-required-version-min',
          filename : 'ecb-cedet-wrapper.el',
          docstring : '  "Minimum version of cedet needed by ECB.<br>The meaning is as follows:<br>1. Major-version<br>2. Minor-version<br>3. 0 = alpha, 1 = beta, 2 = pre, 3 = nothing (e.g. "1.4"), 4 = . (e.g. "1.4.3"<br>4. Subversion after the alpha, beta, pre or .")<br><br>;; The constraint on a max version of ECB has been removed.<br><br>(defun ecb-cedet-missing-libs ()<br>  "Return a list of names of missing cedet-libs.<br>If no cedet libs are missing nil is returned."',
          prototype : '(defconst ecb-cedet-required-version-min "(1 0 2 6)',
          lispcode : '(defconst ecb-cedet-required-version-min <tick>(1 0 2 6)'
        },
        {
          constant : 'ecb-compiled-in-cedet-version',
          filename : 'ecb-cedet-wrapper.el',
          docstring : '  "Cedet-version used for byte-compiling ECB. Either nil when no semantic<br>is loaded or the value of `cedet-version" at ECB-compilation time.")<br><br>(defun ecb-check-semantic-load ()<br>  "Checks if cedet is correctly loaded if semantic 2.X is used and if the same<br>semantic-version has been used for byte-compiling ECB and loading into Emacs.<br>If ECB detects a problem it is reported and then an error is thrown."',
          prototype : '(defconst ecb-compiled-in-cedet-version  (eval-when-compile (ignore-errors cedet-version))',
          lispcode : '(defconst ecb-compiled-in-cedet-version<br>  (eval-when-compile (ignore-errors cedet-version))'
        },
        {
          constant : 'ecb-compiled-in-semantic-version',
          filename : 'ecb-cedet-wrapper.el',
          docstring : '  "Semantic-version used for byte-compiling ECB. Either nil when no semantic<br>is loaded or the value of `semantic-version" at ECB-compilation time.")<br><br>(defconst ecb-compiled-in-cedet-version<br>  (eval-when-compile (ignore-errors cedet-version))<br>  "Cedet-version used for byte-compiling ECB. Either nil when no semantic<br>is loaded or the value of `cedet-version" at ECB-compilation time.")<br><br>(defun ecb-check-semantic-load ()<br>  "Checks if cedet is correctly loaded if semantic 2.X is used and if the same<br>semantic-version has been used for byte-compiling ECB and loading into Emacs.<br>If ECB detects a problem it is reported and then an error is thrown."',
          prototype : '(defconst ecb-compiled-in-semantic-version  (eval-when-compile (ignore-errors semantic-version))',
          lispcode : '(defconst ecb-compiled-in-semantic-version<br>  (eval-when-compile (ignore-errors semantic-version))'
        },
        {
          constant : 'ecb-create-layout-buf-prefix',
          filename : 'ecb-create-layout.el',
          lispcode : '(defconst ecb-create-layout-buf-prefix <apo> *ECB-LC-<apo>)<br>(defconst ecb-create-layout-frame-name <apo>Creation of a new ECB-layout<apo>)<br>(defconst ecb-create-layout-all-buf-types<br>  <tick>(<apo>directories<apo> <apo>history<apo> <apo>methods<apo> <apo>sources<apo> <apo>speedbar<apo> <apo>analyse<apo> <apo>symboldef<apo>))'
        },
        {
          constant : 'ecb-create-layout-file-header',
          filename : 'ecb-create-layout.el',
          docstring : '     "',
          prototype : '(defconst ecb-create-layout-file-header',
          lispcode : '(defconst ecb-create-layout-file-header<br><br>;;; Commentary:<br><br>;; This file contains all user-defined ECB-layouts created by the command<br>;; <backtick>ecb-create-new-layout<tick>.<br>'
        },
        {
          constant : 'ecb-create-layout-help-text-left-right',
          filename : 'ecb-create-layout.el',
          docstring : '  "',
          prototype : '(defconst ecb-create-layout-help-text-left-right',
          lispcode : '(defconst ecb-create-layout-help-text-left-right<br> ECB layout creation mode<br> ========================<br><br> This is the help-screen of this mode. The window<br> displaying this help text is called the edit-window<br> which is neither selectable nor delete-able nor<br> split-able in this mode.<br><br> <left/right/up/down-arrow>: Moving around in current<br> window C-n, C-p: Go to next/previous window (beside<br> the edit-window)<br><br> C-s: Split current window. You will be asked:<br>      - If \<apo>vertical\<apo> or \<apo>horizontal\<apo> split<br>      - How to split: \<apo>at-point\<apo>, \<apo>half\<apo> or<br>        \<apo>other\<apo> (i.e. you can specify any fraction<br>        between 0.1 and 0.9)<br>      - Which type the current window should be<br>        \(see description of C-t below).<br> C-u: Unsplit, ie. delete current window<br> C-t: Give the current window a built-in type<br>      (\<apo>directories\<apo>, \<apo>sources\<apo>, \<apo>methods\<apo>,<br>      \<apo>history\<apo> etc.) or any arbitrary user-defined<br>      type (\<apo>other\<apo>). See the Online-manual!<br><br> C-c: Cancel layout creation. This does not save the<br>      layout. Deletes this frame.<br> C-q: Save current defined layout and quit the layout<br>      creation. You will be asked for a layout-name.<br>      With TAB-completion you can get the names already<br>      in use. You have to choose a new name!<br>      Deletes this frame.<br><br> There are NO other commands or keys available. ALL<br> other keys are disabled in this mode!<br><apo>)'
        },
        {
          constant : 'ecb-create-layout-help-text-top',
          filename : 'ecb-create-layout.el',
          docstring : '  " ECB layout creation mode<br> ========================<br><br> This is the help-screen of this mode. The window displaying this help text is called<br> the edit-window which is neither selectable nor delete-able nor split-able in this mode.<br><br> <left/right/up/down-arrow>: Moving around in current window<br> C-n, C-p: Go to next/previous window (beside the edit-window)<br><br> C-s: Split current window. You will be asked:<br>      - If "vertical" or "horizontal" split<br>      - How to split: "at-point", "half" or "other" (i.e. you can specify any<br>        fraction between 0.1 and 0.9)<br>      - Which type the current window should be (see description of C-t below).<br> C-u: Unsplit, ie. delete current window<br> C-t: Give the current window a built-in type ("directories", "sources", "methods",<br>      "history" etc.) or any arbitrary user-defined type ("other").<br><br> C-c: Cancel layout creation. This does not save the layout. Deletes this frame.<br> C-q: Save current defined layout and quit the layout creation. You will be asked for a<br>      layout-name. With TAB-completion you can get the names already in use.<br>      You have to choose a new name! Deletes this frame.<br><br> There are NO other commands or keys available. ALL other keys are disabled in this mode!<br>")<br><br>(defconst ecb-create-layout-file-header<br>     "',
          prototype : '(defconst ecb-create-layout-help-text-top',
          lispcode : '(defconst ecb-create-layout-help-text-top'
        },
        {
          constant : 'ecb-directories-nodetype-directory',
          filename : 'ecb-file-browser.el',
          lispcode : '(defconst ecb-directories-nodetype-directory 100)<br>(defconst ecb-directories-nodetype-sourcefile 200)<br>(defconst ecb-directories-nodetype-sourcepath 300)<br>(defconst ecb-sources-nodetype-sourcefile 400)<br>(defconst ecb-history-nodetype-bucket 500)<br>(defconst ecb-history-nodetype-filebuffer 600)<br>(defconst ecb-history-nodetype-indirect-filebuffer 700)<br><br>'
        },
        {
          constant : 'ecb-directory-sep-char',
          filename : 'ecb-common-browser.el',
          lispcode : '(defconst ecb-directory-sep-char<br>  ?/)'
        },
        {
          constant : 'ecb-ecb-dir',
          filename : 'ecb-util.el',
          lispcode : '(defconst ecb-ecb-dir<br>  (expand-file-name (file-name-directory (locate-library <apo>ecb<apo>))))<br>(defconst ecb-semantic-dir<br>  (if (locate-library <apo>semantic<apo>)<br>      (expand-file-name (file-name-directory (locate-library <apo>semantic<apo>)))))'
        },
        {
          constant : 'ecb-ecb-parent-dir',
          filename : 'ecb-util.el',
          lispcode : '(defconst ecb-ecb-parent-dir (expand-file-name (concat ecb-ecb-dir <apo>../<apo>)))<br>'
        },
        {
          constant : 'ecb-examples-action-buffer-name',
          filename : 'ecb-examples.el',
          lispcode : '(defconst ecb-examples-action-buffer-name <apo> *ECB action buffer*<apo>)<br>(defvar ecb-examples-action-buffer-keymap nil)<br><br><br>'
        },
        {
          constant : 'ecb-examples-bufferinfo-buffer-name',
          filename : 'ecb-examples.el',
          lispcode : '(defconst ecb-examples-bufferinfo-buffer-name <apo> *ECB buffer info*<apo>)<br>(defvar ecb-examples-bufferinfo-last-file-buffer nil)<br>'
        },
        {
          constant : 'ecb-help-html-subdir',
          filename : 'ecb-help.el',
          lispcode : '(defconst ecb-help-html-subdir <apo>./html-help/<apo>)'
        },
        {
          constant : 'ecb-help-info-start-file',
          filename : 'ecb-help.el',
          lispcode : '(defconst ecb-help-info-start-file <apo>ecb.info<apo>)<br>(defconst ecb-help-html-start-file <apo>ecb.html<apo>)<br>(defconst ecb-help-info-subdir <apo>./info-help/<apo>)<br>(defconst ecb-help-html-subdir <apo>./html-help/<apo>)'
        },
        {
          constant : 'ecb-layout-option-set-function',
          filename : 'ecb-layout.el',
          lispcode : '(defconst ecb-layout-option-set-function<br>  (function (lambda (symbol value)<br>	      (set symbol value)<br>             ;; we must check this because otherwise the layout would be drawn<br>	      ;; if we have changed the initial value regardless if ECB is<br>	      ;; activated or not.<br>	      (when (and (boundp <tick>ecb-minor-mode)<br>                         ecb-minor-mode<br>                         (frame-live-p ecb-frame))<br>                (let ((curr-frame (selected-frame)))<br>                  (unwind-protect<br>                      (progn'
        },
        {
          constant : 'ecb-methods-nodetype-externtag',
          filename : 'ecb-method-browser.el',
          lispcode : '(defconst ecb-methods-nodetype-externtag 2)'
        },
        {
          constant : 'ecb-methods-nodetype-tag',
          filename : 'ecb-method-browser.el',
          lispcode : '(defconst ecb-methods-nodetype-tag 0)<br>(defconst ecb-methods-nodetype-bucket 1)<br>(defconst ecb-methods-nodetype-externtag 2)'
        },
        {
          constant : 'ecb-speedbar-buffer-name',
          filename : 'ecb-speedbar.el',
          lispcode : '(defconst ecb-speedbar-buffer-name <apo> SPEEDBAR<apo><br>  <apo>Name of the ECB speedbar buffer.<apo>)'
        },
        {
          constant : 'ecb-symboldef-temp-buffer-name',
          filename : 'ecb-symboldef.el',
          lispcode : '(defconst ecb-symboldef-temp-buffer-name <apo> *ecb-symboldef-temp-buffer<apo>)'
        },
        {
          constant : 'ecb-temp-dir',
          filename : 'ecb-util.el',
          lispcode : '(defconst ecb-temp-dir<br>  (file-name-as-directory<br>   (or (getenv <apo>TMPDIR<apo>) (getenv <apo>TMP<apo>) (getenv <apo>TEMP<apo>)<br>       (if (eq system-type <tick>windows-nt) <apo>c:/temp/<apo> <apo>/tmp/<apo>)))<br>  <apo>A directory where ECB can store temporary files.<apo>)'
        },
        {
          constant : 'ecb-tod-tip-list',
          filename : 'ecb-tod.el',
          docstring : '    "You can toggle between different layouts with `ecb-toggle-layout" [C-c . t]."',
          prototype : '(defconst ecb-tod-tip-list  "("You can expand the ECB-methods-buffer with "ecb-expand-methods-nodes" [C-c . x]."',
          lispcode : '(defconst ecb-tod-tip-list<br>  <tick>(<apo>You can expand the ECB-methods-buffer with <backtick>ecb-expand-methods-nodes<tick> [C-c . x].<apo><br>    <apo>You can go back to the most recent layout with [C-u] <backtick>ecb-toggle-layout<tick> [C-u C-c . t].<apo><br>    <apo>You can toggle displaying the ECB-windows with <backtick>ecb-toggle-ecb-windows<tick> [C-c . w].<apo><br>    <apo>You can show and hide the ECB-windows on a major-mode-basis with <backtick>ecb-major-modes-show-or-hide<tick>.<apo><br>    <apo>You can maximize a certain ECB-window either via its popup-menu or with [C-x 1] in that window.<apo><br>    <apo>You can use speedbar instead of the native tree-buffers with option <backtick>ecb-use-speedbar-instead-native-tree-buffer<tick>.<apo><br>    <apo>You can speedup access for big directories with option <backtick>ecb-cache-directory-contents<tick>.<apo><br>    <apo>You can display the online help also in HTML-format with option <backtick>ecb-show-help-format<tick>.<apo><br>    <apo>You can interactively create your own layouts with the command <backtick>ecb-create-new-layout<tick>.<apo><br>    <apo>You can start the eshell in the compile-window simply with <backtick>eshell<tick> or [C-c . e].<apo><br>    <apo>Use the incremental search in the methods-buffer for fast node-selecting; see <backtick>ecb-tree-incremental-search<tick>.<apo><br>    <apo>You can cycle through all currently opened \<apo>compile-buffers\<apo> with <backtick>ecb-cycle-through-compilation-buffers<tick>.<apo><br>    <apo>You can change the window-sizes by dragging the mouse and storing the new sizes with <backtick>ecb-store-window-sizes<tick>.<apo><br>    <apo>You can get a quick overlook of all built-in layouts with <backtick>ecb-show-layout-help<tick>.<apo><br>    <apo>Browse your sources as with a web-browser with <backtick>ecb-nav-goto-next<tick> \[C-c . n], <backtick>ecb-nav-goto-previous<tick> \[C-c . p].<apo><br>    <apo>Customize the look\&feel of the tree-buffers with <backtick>ecb-tree-expand-symbol-before<tick> and <backtick>ecb-tree-indent<tick>.<apo><br>    <apo>Customize the contents of the methods-buffer with <backtick>ecb-tag-display-function<tick>, <backtick>ecb-type-tag-display<tick>, <backtick>ecb-show-tags<tick>.<apo><br>    <apo>Customize the main mouse-buttons of the tree-buffers with <backtick>ecb-primary-secondary-mouse-buttons<tick>.<apo><br>    <apo>Customize with <backtick>ecb-tree-do-not-leave-window-after-select<tick> for which tree-buffers a selection doesn<tick>t leave the window.<apo><br>    <apo>Grep a directory \(recursive) by using the popup-menu \(the right mouse-button) in the directories buffer.<apo><br>    <apo>Customize the sorting of the sources with the option <backtick>ecb-sources-sort-method<tick>.<apo><br>    <apo>Narrow the source-buffer to the selected tag in the methods-buffer with <backtick>ecb-tag-visit-post-actions<tick>.<apo><br>    <apo>Enable autom. enlarging of the compile-window by select with the option <backtick>ecb-compile-window-temporally-enlarge<tick>.<apo><br>    <apo>Customize with <backtick>ecb-compile-window-temporally-enlarge<tick> the situations the compile-window is allowed to enlarge.<apo><br>    <apo>Customize the meaning of <backtick>other-window<tick> [C-x o] with the option <backtick>ecb-other-window-behavior<tick>.<apo><br>    <apo>Customize height and width of the ECB-windows with <backtick>ecb-windows-height<tick> and <backtick>ecb-windows-width<tick>.<apo><br>    <apo>Define with <backtick>ecb-compilation-buffer-names<tick> and <backtick>ecb-compilation-major-modes<tick> which buffers are \<apo>compile-buffers\<apo>.<apo><br>    <apo>Customize all faces used by ECB with the customize-groups <backtick>ecb-face-options<tick> and <backtick>ecb-faces<tick>.<apo><br>    <apo>Auto-activate eshell with the option <backtick>ecb-eshell-auto-activate<tick>.<apo><br>    <apo>Get best use of big screen-displays with leftright-layouts like \<apo>leftright1\<apo> or \<apo>leftright2\<apo>.<apo><br>    <apo>Use the POWER-click in the methods-buffer to narrow the clicked node in the edit-window.<apo><br>    <apo>Use the POWER-click in the sources- and history-buffer to get only an overlook of the source-contents.<apo><br>    <apo>Exclude not important sources from being displayed in the sources-buffer with <backtick>ecb-source-file-regexps<tick>.<apo><br>    <apo>Use left- and right-arrow for smart expanding/collapsing tree-buffer-nodes; see <backtick>ecb-tree-navigation-by-arrow<tick>.<apo> ;;<br>    <apo>Add personal key-bindings to the tree-buffers with <backtick>ecb-common-tree-buffer-after-create-hook<tick>.<apo><br>    <apo>Add personal key-bindings to the directories-buffer with <backtick>ecb-directories-buffer-after-create-hook<tick>.<apo><br>    <apo>Add personal key-bindings to the sources-buffer with <backtick>ecb-sources-buffer-after-create-hook<tick>.<apo><br>    <apo>Add personal key-bindings to the methods-buffer with <backtick>ecb-methods-buffer-after-create-hook<tick>.<apo><br>    <apo>Add personal key-bindings to the history-buffer with <backtick>ecb-history-buffer-after-create-hook<tick>.<apo><br>    <apo>Pop up a menu with the right mouse-button and do senseful things in the tree-buffers.<apo><br>    <apo>Extend the builtin popup-menus to your needs - see <backtick>ecb-directories-menu-user-extension<tick>.<apo><br>    <apo>Call <backtick>ecb-show-help<tick> [C-c . o] with a prefix-argument [C-u] and choose the help-format.<apo><br>    <apo>You can change the prefix [C-c .] of all ECB-key-bindings quick and easy with <backtick>ecb-key-map<tick>.<apo><br>    <apo>Send a problem-report to the ECB-mailing-list quick and easy with <backtick>ecb-submit-problem-report<tick>.<apo><br>    <apo>Switch on/off auto. expanding of the ECB-methods-buffer with <backtick>ecb-auto-expand-directory-tree<tick>.<apo><br>    <apo>You can quickly toggle auto. expanding of the ECB-methods-buffer with <backtick>ecb-toggle-auto-expand-tag-tree<tick>.<apo><br>    <apo>Highlight current semantic-tag of the edit-buffer in the ECB-methods-buffer with <backtick>ecb-highlight-tag-with-point<tick>.<apo><br>    <apo>Apply a filter to the sources-buffer either via <backtick>ecb-sources-filter<tick> or via the popup-menu.<apo><br>    <apo>Apply a filter to the history-buffer either via <backtick>ecb-history-filter<tick> or via the popup-menu.<apo><br>    <apo>Apply tag-filters (can be layered) to the methods-buffer either via <backtick>ecb-methods-filter<tick> or via the popup-menu.<apo><br>    <apo>Use <backtick>scroll-all-mode<tick> to scroll both edit-windows of ECB simultaneously - and no other windows are scrolled!<apo><br>    <apo>You can toggle having a compile window with <backtick>ecb-toggle-compile-window<tick> if <backtick>ecb-compile-window-height<tick> is not nil.<apo><br>    <apo>Start ECB automatically after Emacs is started. Use option <backtick>ecb-auto-activate<tick><apo><br>    <apo>Maximize a tree-buffer via modeline - ECB supports the standard-mechanism of (X)Emacs for deleting other windows.<apo><br>    <apo>Easy horizontal scrolling the tree-buffers with the mouse with [M-mouse-1] and [M-mouse-3]; see <backtick>ecb-tree-easy-hor-scroll<tick>.<apo><br>    <apo>Expand and collapse very precisely the current node in a tree-buffer with commands in the popup-menu.<apo><br>    <apo>Let ECB display the version-control-state of your files in the tree-buffers. See <backtick>ecb-vc-enable-support<tick>.<apo><br>    <apo>Work with remote paths (e.g. TRAMP-, ANGE-FTP-, or EFS-paths) as with local paths in <backtick>ecb-source-path<tick>.<apo><br>    <apo>Exclude certain files from being displayed in the history-buffer. See <backtick>ecb-history-exclude-file-regexps<tick>.<apo><br>    <apo>Get the most important options of ECB at a glance by viewing the customization group \<apo>ecb-most-important\<apo>.<apo><br>    )<br>  <apo>List of all available tips of the day.<apo>)<br><br><br>'
        },
        {
          constant : 'ecb-upgradable-option-alist',
          filename : 'ecb-upgrade.el',
          docstring : '  "Alist of all options which should be upgraded for current ECB-version.<br>There are several reasons why an option should be contained in this alist:<br>a) An old option has just be renamed in current-ECB version but has still the<br>   same type of value so the new option should get the value of the old one.<br>b) An old option has changed its type and we try to transform the old-typed<br>   value to the new type.<br>c) An old option has be renamed and also changed its type so we try to<br>   transform the value of the old option to the type of the new option and set<br>   the new option to this transformed value.<br><br>If an old option has changed its type and we can not savely transform the<br>old-value to the new type then this option should NOT be contained in this<br>alist! Such an option is auto. reset to the current default-value by<br>`ecb-upgrade-not-compatible-options"!<br><br>Every element of this alist has the following form:<br>The car is the old option symbol and the cdr is a 2-element-list with:<br>1. elem: The new option symbol (can be equal with the old option symbol, see<br>   b) above)<br>2. elem: A function which converts the value of the old option to the new<br>   option. If the type of the options is identical (i.e. only the option name<br>   has been changed, see a) above) then this function should be `identity"<br>   otherwise a function which gets one argument (the value of the old option)<br>   and returns either a corresponding value for the new option with the new<br>   correct type or the symbol "ecb-no-upgrade-conversion if no correct<br>   conversion can be performed! Maybe the function `ecb-option-get-value" can<br>   be helpful within such a transforming-function.")<br><br>;; ----------------------------------------------------------------------<br>;; define here all necessary upgrade functions<br>;; ----------------------------------------------------------------------<br><br>;; upgrading ecb-compile-window-temporally-enlarge<br>(defun ecb-upgrade-compile-window-temporally-enlarge (old-val)<br>  (cl-case old-val<br>    ((t after-compilation) "after-display)<br>    ((nil) nil)<br>    ((after-selection both) old-val)<br>    (otherwise "ecb-no-upgrade-conversion)))<br><br>;; upgrading ecb-window-sync<br>(defun ecb-upgrade-window-sync (old-val)<br>  (if (equal old-val t)<br>      (ecb-option-get-value "ecb-window-sync "standard-value)<br>    nil))<br><br>(defun ecb-upgrade-layout-window-sizes (old-val)<br>  (ecb-option-get-value "ecb-layout-window-sizes "standard-value))<br><br>;; upgrading old layout-numbers (ECB <= 1.80) to new layout-names (ECB<br>;; >= 1.90)<br>(defun ecb-upgrade-layout-nr2name (number)<br>  (let ((number-name-alist "((nil . "left8")<br>                             (0 . "left1")<br>                             (1 . "left2")<br>                             (2 . "left3")<br>                             (3 . "left4")<br>                             (4 . "left5")<br>                             (5 . "right1")<br>                             (6 . "left6")<br>                             (7 . "top1")<br>                             (8 . "left7")<br>                             (9 . "left8")<br>                             (10 . "top2")<br>                             (11 . "left9")<br>                             (12 . "left10")<br>                             (13 . "left11")<br>                             (14 . "left12")<br>                             (15 . "left13")<br>                             (16 . "left14")<br>                             (17 . "left15")<br>                             (18 . "leftright1")<br>                             (19 . "leftright2")<br>                             (20 . "speedbar1"))))<br>    (cdr (assoc number number-name-alist))))<br><br>(defun ecb-upgrade-layout-nr (old-val)<br>  (let ((name (ecb-upgrade-layout-nr2name old-val)))<br>    (if (stringp name)<br>        name<br>      "ecb-no-upgrade-conversion)))<br><br>(defun ecb-upgrade-toggle-layout-sequence (old-val)<br>  (mapcar (function (lambda (elem)<br>                      (ecb-upgrade-layout-nr2name elem)))<br>          old-val))<br><br>(defun ecb-upgrade-use-speedbar-for-directories (old-val)<br>  (if old-val<br>      "dir))<br><br>(defun ecb-upgrade-major-modes-activate (old-val)<br>  (if (not (listp old-val))<br>      old-val<br>    (let ((l (copy-tree old-val)))<br>      (dolist (elem l)<br>        (if (and (consp elem)<br>                 (integerp (cdr elem)))<br>            (setcdr elem (ecb-upgrade-layout-nr2name (cdr elem)))))<br>      l)))<br><br>(defun ecb-upgrade-cache-directory-contents (old-val)<br>  (mapcar (function (lambda (elem)<br>                      (cons (nth 0 elem) (nth 1 elem))))<br>          old-val))<br><br>(defun ecb-upgrade-truncate-lines (old-val)<br>  (cond ((equal t old-val)<br>         "(ecb-directories-buffer-name<br>           ecb-sources-buffer-name<br>           ecb-methods-buffer-name<br>           ecb-history-buffer-name))<br>        ((equal nil old-val)<br>         nil)<br>        ((listp old-val)<br>         (let ((new-list nil))<br>           (if (nth 0 old-val)<br>               (setq new-list (cons "ecb-directories-buffer-name new-list)))<br>           (if (nth 1 old-val)<br>               (setq new-list (cons "ecb-sources-buffer-name new-list)))<br>           (if (nth 2 old-val)<br>               (setq new-list (cons "ecb-methods-buffer-name new-list)))<br>           (if (nth 3 old-val)<br>               (setq new-list (cons "ecb-history-buffer-name new-list)))<br>           new-list))<br>        (t<br>         "(ecb-directories-buffer-name<br>           ecb-sources-buffer-name<br>           ecb-methods-buffer-name<br>           ecb-history-buffer-name))))<br><br>(defun ecb-upgrade-alway-operate-in-edit-window (old-val)<br>  (let ((l (copy-tree old-val)))<br>    (setq l (delete "switch-to-buffer-other-window l))<br>    l))<br><br>(defun ecb-upgrade-mode-line-prefixes (old-val)<br>  (list (cons "ecb-directories-buffer-name<br>              (nth 0 old-val))<br>        (cons "ecb-sources-buffer-name<br>              (nth 1 old-val))<br>        (cons "ecb-methods-buffer-name<br>              (nth 2 old-val))<br>        (cons "ecb-history-buffer-name<br>              (nth 3 old-val))))<br><br>(defun ecb-upgrade-mode-line-data (old-val)<br>  (list (cons "ecb-directories-buffer-name<br>              (if (equal (nth 0 old-val) "selected)<br>                  "sel-dir<br>                (nth 0 old-val)))<br>        (cons "ecb-sources-buffer-name<br>              (if (equal (nth 1 old-val) "selected)<br>                  "sel-dir<br>                (nth 1 old-val)))<br>        (cons "ecb-methods-buffer-name<br>              (if (equal (nth 2 old-val) "selected)<br>                  "sel-source<br>                (nth 2 old-val)))<br>        (cons "ecb-history-buffer-name<br>              (nth 3 old-val))))<br><br>(defun ecb-upgrade-menu-extension (old-list)<br>  (mapcar (function (lambda (i)<br>                      (reverse i)))<br>          old-list))<br><br>(defun ecb-upgrade-directories-menu-ext (old-val)<br>  (append (ecb-upgrade-menu-extension old-val)<br>          (ecb-option-get-value "ecb-directories-menu-user-extension<br>                                "standard-value)))<br><br>(defun ecb-upgrade-sources-menu-ext (old-val)<br>  (append (ecb-upgrade-menu-extension old-val)<br>          (ecb-option-get-value "ecb-sources-menu-user-extension<br>                                "standard-value)))<br><br>(defun ecb-upgrade-methods-menu-ext (old-val)<br>  (append (ecb-upgrade-menu-extension old-val)<br>          (ecb-option-get-value "ecb-methods-menu-user-extension<br>                                "standard-value)))<br><br>(defun ecb-upgrade-history-menu-ext (old-val)<br>  (append (ecb-upgrade-menu-extension old-val)<br>          (ecb-option-get-value "ecb-history-menu-user-extension<br>                                "standard-value)))<br><br>(defun ecb-upgrade-token-display-function (old-val)<br>  (let ((l (copy-tree old-val))<br>        (mapping-list<br>         "((semantic-name-nonterminal                  . ecb--semantic-format-tag-name)<br>           (semantic-abbreviate-nonterminal            . ecb--semantic-format-tag-abbreviate)<br>           (semantic-summarize-nonterminal             . ecb--semantic-format-tag-summarize)<br>           (semantic-prototype-nonterminal             . ecb--semantic-format-tag-prototype)<br>           (semantic-concise-prototype-nonterminal     . ecb--semantic-format-tag-concise-prototype)<br>           (semantic-uml-abbreviate-nonterminal        . ecb--semantic-format-tag-uml-abbreviate)<br>           (semantic-uml-prototype-nonterminal         . ecb--semantic-format-tag-uml-prototype)<br>           (semantic-uml-concise-prototype-nonterminal . ecb--semantic-format-tag-uml-concise-prototype)<br>           (semantic-prin1-nonterminal                 . ecb--semantic-format-tag-prin1)<br>           (ecb-name-nonterminal                  . ecb-format-tag-name)<br>           (ecb-abbreviate-nonterminal            . ecb-format-tag-abbreviate)<br>           (ecb-summarize-nonterminal             . ecb-format-tag-summarize)<br>           (ecb-prototype-nonterminal             . ecb-format-tag-prototype)<br>           (ecb-concise-prototype-nonterminal     . ecb-format-tag-concise-prototype)<br>           (ecb-uml-abbreviate-nonterminal        . ecb-format-tag-uml-abbreviate)<br>           (ecb-uml-prototype-nonterminal         . ecb-format-tag-uml-prototype)<br>           (ecb-uml-concise-prototype-nonterminal . ecb-format-tag-uml-concise-prototype)<br>           (ecb-prin1-nonterminal                 . ecb-format-tag-prin1))))<br>    (mapc (function (lambda (e)<br>                      (if (assoc (cdr e) mapping-list)<br>                          (setcdr e (cdr (assoc (cdr e) mapping-list))))))<br>          l)<br>    l))<br><br><br>(defun ecb-upgrade-type-token-display (old-val)<br>  (let ((val-copy (copy-tree old-val))<br>        (mapping-list<br>         "((ecb-type-token-class-face . ecb-type-tag-class-face)<br>           (ecb-type-token-interface-face . ecb-type-tag-interface-face)<br>           (ecb-type-token-struct-face . ecb-type-tag-struct-face)<br>           (ecb-type-token-typedef-face . ecb-type-tag-typedef-face)<br>           (ecb-type-token-enum-face . ecb-type-tag-enum-face)<br>           (ecb-type-token-group-face . ecb-type-tag-group-face))))<br>    (mapc (function (lambda (e)<br>                      (dolist (l (cdr e))<br>                        (if (assoc (nth 2 l) mapping-list)<br>                            (ecb-set-elt l 2<br>                                         (cdr (assoc (nth 2 l) mapping-list)))))))<br>          val-copy)<br>    val-copy))<br><br>(defun ecb-upgrade-post-process-semantic-tokenlist (old-val)<br>  (let ((val-copy (copy-tree old-val))<br>        (mapping-list<br>         "((ecb-group-function-tokens-with-parents . ecb-group-function-tags-with-parents))))<br>    (mapc (function (lambda (e)<br>                      (if (assoc (cdr e) mapping-list)<br>                          (setcdr e (cdr (assoc (cdr e) mapping-list))))))<br>          val-copy)<br>    val-copy))<br><br>(defun ecb-upgrade-token-visit-post-actions (old-val)<br>  (let ((val-copy (copy-tree old-val))<br>        (mapping-list<br>         "((ecb-token-visit-highlight-token-header . ecb-tag-visit-highlight-tag-header)<br>           (ecb-token-visit-smart-token-start . ecb-tag-visit-smart-tag-start)<br>           (ecb-token-visit-recenter . ecb-tag-visit-recenter)<br>           (ecb-token-visit-recenter-top . ecb-tag-visit-recenter-top)<br>           (ecb-token-visit-goto-doc-start . ecb-tag-visit-goto-doc-start)<br>           (ecb-token-visit-narrow-token . ecb-tag-visit-narrow-tag))))<br>    (mapc (function (lambda (e)<br>                      (dotimes (i (length (cdr e)))<br>                        (if (assoc (nth i (cdr e)) mapping-list)<br>                            (ecb-set-elt (cdr e) i<br>                                         (cdr (assoc (nth i (cdr e))<br>                                                     mapping-list)))))))<br>          val-copy)<br>    val-copy))<br><br>(defun ecb-upgrade-token-header-face (old-val)<br>  (if (equal old-val "ecb-token-header-face)<br>      "ecb-tag-header-face<br>    old-val))<br><br>(defun ecb-upgrade-post-process-semantic-taglist (old-val)<br>  (let ((l (copy-tree old-val)))<br>    (dolist (elem l)<br>      (if (cdr elem)<br>          (setcdr elem (list (cdr elem)))))<br>    l))<br><br>(defun ecb-upgrade-split-edit-window (old-val)<br>  (if (equal old-val t)<br>      "before-activation<br>    old-val))<br><br>(defun ecb-upgrade-other-window-jump-behavior (old-val)<br>  (if (equal old-val "all)<br>      "all<br>    (ecb-option-get-value "ecb-other-window-behavior<br>                          "standard-value)))<br><br>(defun ecb-upgrade-show-tags (old-val)<br>  (ecb-option-get-value "ecb-show-tags<br>                        "standard-value))<br><br>(defun ecb-upgrade-sort-history-items (old-val)<br>  (if old-val ecb-sources-sort-method))<br><br>(defun ecb-upgrade-excluded-directories-regexp (old-val)<br>  (list old-val))<br><br>(defun ecb-upgrade-source-file-regexps (old-val)<br>  (let ((l (copy-tree old-val)))<br>    (dolist (elem l)<br>      (setcdr elem (list (list (cadr elem)) (list (caddr elem)))))<br>    l))<br><br>(defun ecb-upgrade-exclude-parents-regexp (old-val)<br>  (if old-val (list old-val)))<br><br>(defun ecb-upgrade-auto-expand-tag-tree-collapse-other (old-val)<br>  (if old-val<br>      "only-if-on-tag<br>    nil))<br><br>(defun ecb-upgrade-prescan-directories-for-emptyness (old-val)<br>  (if old-val "unless-remote nil))<br><br>(defun ecb-upgrade-sources-perform-read-only-check (old-val)<br>  (if old-val "unless-remote nil))<br><br>(defun ecb-upgrade-vc-enable-support (old-val)<br>  (if old-val "unless-remote nil))<br><br>(defun ecb-upgrade-tree-image-icons-directories (old-val)<br>  (let ((l (copy-tree old-val)))<br>    (cons (nth 0 l)<br>          (delq nil (list (if (nth 1 l)<br>                              (cons "ecb-directories-buffer-name<br>                                    (nth 1 l)))<br>                          (if (nth 2 l)<br>                              (cons "ecb-sources-buffer-name<br>                                    (nth 2 l)))<br>                          (if (nth 3 l)<br>                              (cons "ecb-methods-buffer-name<br>                                    (nth 3 l)))<br>                          (if (nth 4 l)<br>                              (cons "ecb-history-buffer-name<br>                                    (nth 4 l))))))))<br><br>(defun ecb-upgrade-tree-RET-selects-edit-window (old-val)<br>  (delq nil (mapcar (lambda (b)<br>                      (and (not (ecb-member-of-symbol/value-list<br>                                 (symbol-value b)<br>                                 old-val))<br>                           b))<br>                    "(ecb-directories-buffer-name<br>                      ecb-sources-buffer-name<br>                      ecb-methods-buffer-name<br>                      ecb-history-buffer-name<br>                      ecb-analyse-buffer-name))))<br><br><br>;; ----------------------------------------------------------------------<br>;; internal functions. Don"t change anything below this line<br>;; ----------------------------------------------------------------------<br><br>(defgroup ecb-upgrade-internal nil<br>  "Only Internal setting for the ECB upgrade-mechanism - no user-options!"',
          prototype : '(defconst ecb-upgradable-option-alist  "((ecb-compile-window-temporally-enlarge . (ecb-compile-window-temporally-enlarge                                              ecb-upgrade-compile-window-temporally-enlarge))    (ecb-hide-ecb-windows-hook . (ecb-hide-ecb-windows-before-hook identity))    (ecb-show-ecb-windows-hook . (ecb-show-ecb-windows-before-hook identity))    (ecb-layout-nr . (ecb-layout-name ecb-upgrade-layout-nr))    (ecb-toggle-layout-sequence . (ecb-toggle-layout-sequence                                   ecb-upgrade-toggle-layout-sequence))    (ecb-cache-directory-contents . (ecb-cache-directory-contents                                     ecb-upgrade-cache-directory-contents))    (ecb-layout-always-operate-in-edit-window . (ecb-layout-always-operate-in-edit-window                                                 ecb-upgrade-alway-operate-in-edit-window))    (ecb-truncate-lines . (ecb-tree-truncate-lines ecb-upgrade-truncate-lines))    (ecb-mode-line-prefixes . (ecb-mode-line-prefixes                               ecb-upgrade-mode-line-prefixes))    (ecb-mode-line-data . (ecb-mode-line-data                               ecb-upgrade-mode-line-data))    (ecb-use-speedbar-for-directories . (ecb-use-speedbar-instead-native-tree-buffer                                         ecb-upgrade-use-speedbar-for-directories))    (ecb-directories-menu-user-extension . (ecb-directories-menu-user-extension                                            ecb-upgrade-directories-menu-ext))    (ecb-sources-menu-user-extension . (ecb-sources-menu-user-extension                                        ecb-upgrade-sources-menu-ext))    (ecb-methods-menu-user-extension . (ecb-methods-menu-user-extension                                        ecb-upgrade-methods-menu-ext))    (ecb-history-menu-user-extension . (ecb-history-menu-user-extension                                        ecb-upgrade-history-menu-ext))    (ecb-bucket-token-display . (ecb-bucket-node-display identity))    (ecb-auto-expand-token-tree . (ecb-auto-expand-tag-tree identity))    (ecb-font-lock-tokens . (ecb-font-lock-tags identity))    (ecb-layout-window-sizes . (ecb-layout-window-sizes ecb-upgrade-layout-window-sizes))    (ecb-token-jump-sets-mark . (ecb-tag-jump-sets-mark identity))    (ecb-token-display-function . (ecb-tag-display-function ecb-upgrade-token-display-function))    (ecb-type-token-display . (ecb-type-tag-display ecb-upgrade-type-token-display))    (ecb-post-process-semantic-tokenlist . (ecb-post-process-semantic-taglist                                            ecb-upgrade-post-process-semantic-tokenlist))    (ecb-show-only-positioned-tokens . (ecb-show-only-positioned-tags identity))    (ecb-show-tokens . (ecb-show-tags ecb-upgrade-show-tags))    (ecb-show-tags . (ecb-show-tags ecb-upgrade-show-tags))    (ecb-highlight-token-with-point . (ecb-highlight-tag-with-point identity))    (ecb-highlight-token-with-point-delay . (ecb-highlight-tag-with-point-delay identity))    (ecb-token-visit-post-actions . (ecb-tag-visit-post-actions                                     ecb-upgrade-token-visit-post-actions))    (ecb-token-header-face . (ecb-tag-header-face                              ecb-upgrade-token-header-face))    (ecb-post-process-semantic-taglist . (ecb-post-process-semantic-taglist                                          ecb-upgrade-post-process-semantic-taglist))    (ecb-primary-mouse-jump-destination . (ecb-mouse-click-destination identity))    (ecb-split-edit-window . (ecb-split-edit-window-after-start ecb-upgrade-split-edit-window))    (ecb-sort-history-items . (ecb-history-sort-method ecb-upgrade-sort-history-items))    (ecb-other-window-jump-behavior . (ecb-other-window-behavior ecb-upgrade-other-window-jump-behavior))    (ecb-excluded-directories-regexp . (ecb-excluded-directories-regexps                                        ecb-upgrade-excluded-directories-regexp))    (ecb-source-file-regexps . (ecb-source-file-regexps                                ecb-upgrade-source-file-regexps))    (ecb-exclude-parents-regexp . (ecb-exclude-parents-regexps                                   ecb-upgrade-exclude-parents-regexp))    (ecb-auto-expand-tag-tree-collapse-other . (ecb-auto-expand-tag-tree-collapse-other                                                ecb-upgrade-auto-expand-tag-tree-collapse-other))    (ecb-prescan-directories-for-emptyness . (ecb-prescan-directories-for-emptyness                                              ecb-upgrade-prescan-directories-for-emptyness))    (ecb-sources-perform-read-only-check . (ecb-sources-perform-read-only-check                                            ecb-upgrade-sources-perform-read-only-check))    (ecb-vc-enable-support . (ecb-vc-enable-support                              ecb-upgrade-vc-enable-support))    (ecb-tree-image-icons-directories . (ecb-tree-image-icons-directories                                         ecb-upgrade-tree-image-icons-directories))    (ecb-tree-RET-selects-edit-window . (ecb-tree-do-not-leave-window-after-select                                         ecb-upgrade-tree-RET-selects-edit-window))    (ecb-grep-find-function . (ecb-grep-recursive-function identity))    )',
          lispcode : '(defconst ecb-upgradable-option-alist<br>  <tick>((ecb-compile-window-temporally-enlarge . (ecb-compile-window-temporally-enlarge<br>                                              ecb-upgrade-compile-window-temporally-enlarge))<br>    (ecb-hide-ecb-windows-hook . (ecb-hide-ecb-windows-before-hook identity))<br>    (ecb-show-ecb-windows-hook . (ecb-show-ecb-windows-before-hook identity))<br>    (ecb-layout-nr . (ecb-layout-name ecb-upgrade-layout-nr))<br>    (ecb-toggle-layout-sequence . (ecb-toggle-layout-sequence<br>                                   ecb-upgrade-toggle-layout-sequence))<br>    (ecb-cache-directory-contents . (ecb-cache-directory-contents<br>                                     ecb-upgrade-cache-directory-contents))<br>    (ecb-layout-always-operate-in-edit-window . (ecb-layout-always-operate-in-edit-window<br>                                                 ecb-upgrade-alway-operate-in-edit-window))<br>    (ecb-truncate-lines . (ecb-tree-truncate-lines ecb-upgrade-truncate-lines))<br>    (ecb-mode-line-prefixes . (ecb-mode-line-prefixes<br>                               ecb-upgrade-mode-line-prefixes))<br>    (ecb-mode-line-data . (ecb-mode-line-data<br>                               ecb-upgrade-mode-line-data))<br>    (ecb-use-speedbar-for-directories . (ecb-use-speedbar-instead-native-tree-buffer<br>                                         ecb-upgrade-use-speedbar-for-directories))<br><br>    (ecb-directories-menu-user-extension . (ecb-directories-menu-user-extension<br>                                            ecb-upgrade-directories-menu-ext))<br>    (ecb-sources-menu-user-extension . (ecb-sources-menu-user-extension<br>                                        ecb-upgrade-sources-menu-ext))<br>    (ecb-methods-menu-user-extension . (ecb-methods-menu-user-extension<br>                                        ecb-upgrade-methods-menu-ext))<br>    (ecb-history-menu-user-extension . (ecb-history-menu-user-extension<br>                                        ecb-upgrade-history-menu-ext))<br>    (ecb-bucket-token-display . (ecb-bucket-node-display identity))<br>    (ecb-auto-expand-token-tree . (ecb-auto-expand-tag-tree identity))<br>    (ecb-font-lock-tokens . (ecb-font-lock-tags identity))<br>    (ecb-layout-window-sizes . (ecb-layout-window-sizes ecb-upgrade-layout-window-sizes))<br>    (ecb-token-jump-sets-mark . (ecb-tag-jump-sets-mark identity))<br>    (ecb-token-display-function . (ecb-tag-display-function ecb-upgrade-token-display-function))<br>    (ecb-type-token-display . (ecb-type-tag-display ecb-upgrade-type-token-display))<br>    (ecb-post-process-semantic-tokenlist . (ecb-post-process-semantic-taglist<br>                                            ecb-upgrade-post-process-semantic-tokenlist))<br>    (ecb-show-only-positioned-tokens . (ecb-show-only-positioned-tags identity))<br>    (ecb-show-tokens . (ecb-show-tags ecb-upgrade-show-tags))<br>    (ecb-show-tags . (ecb-show-tags ecb-upgrade-show-tags))<br>    (ecb-highlight-token-with-point . (ecb-highlight-tag-with-point identity))<br>    (ecb-highlight-token-with-point-delay . (ecb-highlight-tag-with-point-delay identity))<br>    (ecb-token-visit-post-actions . (ecb-tag-visit-post-actions<br>                                     ecb-upgrade-token-visit-post-actions))<br>    (ecb-token-header-face . (ecb-tag-header-face<br>                              ecb-upgrade-token-header-face))<br>    (ecb-post-process-semantic-taglist . (ecb-post-process-semantic-taglist<br>                                          ecb-upgrade-post-process-semantic-taglist))<br>    (ecb-primary-mouse-jump-destination . (ecb-mouse-click-destination identity))<br>    (ecb-split-edit-window . (ecb-split-edit-window-after-start ecb-upgrade-split-edit-window))<br>    (ecb-sort-history-items . (ecb-history-sort-method ecb-upgrade-sort-history-items))<br>    (ecb-other-window-jump-behavior . (ecb-other-window-behavior ecb-upgrade-other-window-jump-behavior))<br>    (ecb-excluded-directories-regexp . (ecb-excluded-directories-regexps<br>                                        ecb-upgrade-excluded-directories-regexp))<br>    (ecb-source-file-regexps . (ecb-source-file-regexps<br>                                ecb-upgrade-source-file-regexps))<br>    (ecb-exclude-parents-regexp . (ecb-exclude-parents-regexps<br>                                   ecb-upgrade-exclude-parents-regexp))<br>    (ecb-auto-expand-tag-tree-collapse-other . (ecb-auto-expand-tag-tree-collapse-other<br>                                                ecb-upgrade-auto-expand-tag-tree-collapse-other))<br>    (ecb-prescan-directories-for-emptyness . (ecb-prescan-directories-for-emptyness<br>                                              ecb-upgrade-prescan-directories-for-emptyness))<br>    (ecb-sources-perform-read-only-check . (ecb-sources-perform-read-only-check<br>                                            ecb-upgrade-sources-perform-read-only-check))<br>    (ecb-vc-enable-support . (ecb-vc-enable-support<br>                              ecb-upgrade-vc-enable-support))<br>    (ecb-tree-image-icons-directories . (ecb-tree-image-icons-directories<br>                                         ecb-upgrade-tree-image-icons-directories))<br>    (ecb-tree-RET-selects-edit-window . (ecb-tree-do-not-leave-window-after-select<br>                                         ecb-upgrade-tree-RET-selects-edit-window))<br>    (ecb-grep-find-function . (ecb-grep-recursive-function identity))<br>    )'
        },
        {
          constant : 'ecb-upgrade-news',
          filename : 'ecb-upgrade.el',
          docstring : '	       "ECB now requires Emacs 29.x (though previous versions may work."',
          prototype : '(defconst ecb-upgrade-news  "(("2.51" . ("By default ECB now utilizes CEDET distributed as part of Emacs."',
          lispcode : '(defconst ecb-upgrade-news<br>  <tick>((<apo>2.51<apo> . (<apo>By default ECB now utilizes CEDET distributed as part of Emacs.<apo><br>               <apo>This release includes numerous fixes related to moving to the latest Emacs<apo><br>               ))<br>    (<apo>2.50<apo> . (<apo>ECB now requires full CEDET being installed (at least 2.0).<apo><br>	       <apo>By default ECB now utilizes CEDET distributed as part of Emacs.<apo><br>	       <apo>ECB now requires Emacs 24.4 (though previous versions may work.<apo><br>               <apo>This release includes numerous fixes related to moving to the latest Emacs<apo><br>               ))<br>    (<apo>2.40<apo> . (<apo>ECB now requires full CEDET being installed (at least 1.0pre6).<apo><br>               <apo>More user-responsible buffer-parsing based on the idle-mechanism of semantic.<apo><br>               <apo>ECB is able to work with indirect buffers it the base-buffer is filebased.<apo><br>               <apo>The history can now be bucketized, see new <backtick>ecb-history-make-buckets<tick>.<apo><br>               <apo>New faces <backtick>ecb-history-bucket-node-face<tick>, <backtick>ecb-history-dead-buffer-face<tick>, <backtick>ecb-history-indirect-buffer-face<tick>.<apo><br>               <apo>Sticky parwnt-node for all ECB-windows of type tree-buffer.<apo><br>               <apo>New support for Git and Monotone as version-control systems.<apo><br>               <apo>New command <backtick>ecb-goto-window-edit-by-smart-selection<tick>.<apo><br>               <apo>New command <backtick>ecb-goto-window-ecb-by-smart-selection<tick>.<apo><br>               <apo>New option <backtick>ecb-ignore-pop-up-frames<tick>.<apo><br>               <apo>Full compatibility with Emacs 22 and 23 - see NEWS file.<apo><br>               <apo>Better compatibility with CEDET 1.0preX and semantic 2.0preX - see NEWS file.<apo><br>               <apo>The internal download-feature of ECB has been completely disabled.<apo><br>               ))<br>    (<apo>2.32<apo> . (<apo>New ECB-window (tree-buffer) for the semantic-analyser.<apo><br>               <apo>New ECB-window for displaying definition for current symbol at point.<apo><br>               <apo>Up- and down-arrow are now also smart in the tree-buffers.<apo><br>               <apo>Much better maximizing/minimizing of the ecb-tree-windows.<apo><br>               <apo>New option <backtick>ecb-maximize-next-after-maximized-select<tick>.<apo><br>               <apo><backtick>ecb-truncate-lines<tick> has been renamed to <backtick>ecb-tree-truncate-lines<tick><apo>))<br>    (<apo>2.30<apo> . (<apo>Support for displaying the VC-state in the tree-buffers; see NEWS.<apo> ;;<br>               <apo>ECB is now capable of handling remote paths (e.g. TRAMP-paths)<apo><br>               <apo>Precisely expanding of current node via popup-menu of the methods-buffer.<apo><br>               <apo>Time consuming tasks are performed stealthy; see <backtick>ecb-stealthy-tasks-delay<tick><apo>))<br>    (<apo>2.27<apo> . (<apo>Much saver resizing-mechanism for permanent compile-window. See NEWS.<apo>))<br>    (<apo>2.26<apo> . (<apo>Some regexp-options has been changed to regexp-list-options. See NEWS.<apo><br>               <apo>New option <backtick>ecb-history-exclude-file-regexps<tick>.<apo><br>               <apo><backtick>ecb-expand-methods-nodes<tick> works for non-semantic-buffers too.<apo><br>               <apo>Readonly-sourcefiles are display in a different face.<apo>))<br>    (<apo>2.25<apo> . (<apo><backtick>ecb-sort-history-items<tick> has been renamed to <backtick>ecb-history-sort-method<tick><apo><br>               <apo>New options <backtick>ecb-sources-sort-ignore-case<tick> and <backtick>ecb-history-sort-ignore-case<tick><apo><br>               <apo>New icons for parent-display in the Methods-buffer<apo>))<br>    (<apo>2.24<apo> . (<apo>New \<apo>current-type\<apo>-filter for the Methods-buffer<apo><br>               <apo>Now directories are prescanned for emptyness<apo>))<br>    (<apo>2.23<apo> . (<apo>New cedet1.0beta2 is supported.<apo><br>               <apo>Distinction between functions and function-prototypes in the Methods-buffer<apo><br>               <apo>The command <backtick>ecb-toggle-layout<tick> now has a prefix-argument<apo><br>               <apo>Default tag-filters for certain files which are applied automatically<apo><br>               <apo>Double-clicking the mouse-1-button now works with integrated speedbar<apo><br>               <apo>A new hook <backtick>ecb-speedbar-before-activate-hook<tick><apo>))<br>    (<apo>2.22<apo> . (<apo>New nifty feature for filtering the tags displayed in the Methods-buffer<apo><br>               <apo>Much smarter mechanism to highlight the current tag in the methods-buffer<apo><br>               <apo>New option <backtick>ecb-auto-expand-tag-tree-collapse-other<tick>.<apo><br>               <apo>Fixed a bug preventing the native Windows-port of XEmacs from working.<apo>))<br>    (<apo>2.21<apo> . (<apo>Advice for <backtick>balance-windows<tick> so only the edit-windows are balanced.<apo><br>               <apo>Gnus, BBDB, VM, Xrefactory etc. work even when ECB-windows are visible.<apo><br>               <apo>Commands using <backtick>Electric-pop-up-window<tick> now work correctly with ECB.<apo><br>               <apo>Fixed some annoying bugs and one fatal bug.<apo>))<br>    (<apo>2.20<apo> . (<apo>Fixed a bug preventing tree-buffers with expand-symbol \<tick>before\<tick> to work<apo><br>               <apo><tick>ecb-major-modes-\(de)activate<tick> replaced by <backtick>ecb-major-modes-show-or-hide<tick><apo><br>               <apo>New keybinding for the online-help: [C-c . h]<apo><br>               <apo>The edit-area can be splitted in more than 2 windows.<apo><br>               <apo><backtick>ecb-other-window-jump-behavior<tick> renamed in <backtick>ecb-other-window-behavior<tick><apo><br>               <apo>New option <backtick>ecb-maximize-ecb-window-after-selection<tick><apo><br>               <apo>popup-menus of the tree-buffers can be used with the tmm-library<apo><br>               <apo>New option <backtick>ecb-change-layout-preserves-compwin-state<tick><apo><br>               <apo><backtick>delete-window<tick> and <backtick>delete-other-windows<tick> handle the compile-window<apo><br>               <apo>Support of the default modeline-mechanisms for deleting other windows<apo>))<br>    (<apo>2.11<apo> . (<apo>Using semanticdb to jump to type-tags defined in other files<apo>))<br>    (<apo>2.01<apo> . (<apo>Support for semantic 2.0<apo><br>               <apo>The tree-buffers can be displayed graphically with images<apo><br>               <apo>Popup-menus of the tree-buffers support submenus<apo><br>               <apo>The sources- and the history-buffer can be filtered<apo><br>               <apo>Ediff runs per default in the ECB-frame<apo>))<br>    (<apo>1.96<apo> . (<apo>ECB can work together with the window-managers escreen and winring<apo><br>               <apo>Much better support of the ECB-compile-window<apo>))))<br><br><br>'
        },
        {
          constant : 'ecb-vc-incr-searchpattern-node-prefix',
          filename : 'ecb-file-browser.el',
          docstring : '  "Prefix-pattern which ignores all not interesting vc-icon-stuff of a<br>node-name at incr. search. This ignores the "(<vc-state-char>)" whereas<br><vc-state-char> is one of u, e, m, p or ?.<br>Format: cons with car is the pattern and cdr is the number of subexpr in this<br>pattern.")<br><br><br>(defun ecb-vc-check-state (file tree-buffer-name vc-state-fcn)<br>  "Check if the VC-state for FILE must be rechecked, i.e. if it is out of<br>date. If it is still valid and also already checked for TREE-BUFFER-NAME then<br>return the symbol "unchanged (if still valid but only not checked for<br>TREE-BUFFER-NAME then return the state and store the fact that it has been<br>check now also for this buffer). Otherwise check the new state for FILE with<br>VC-STATE-FCN, store it in the cache only for TREE-BUFFER-NAME and return the<br>new state."',
          prototype : '(defconst ecb-vc-incr-searchpattern-node-prefix  "("\\(\\(([uempx?])\\)? \\)?" . 2)',
          lispcode : '(defconst ecb-vc-incr-searchpattern-node-prefix<br>  <tick>(<apo>\\(\\(([uempx?])\\)? \\)?<apo> . 2)'
        },
        {
          constant : 'ecb-vc-state-icon-alist',
          filename : 'ecb-file-browser.el',
          docstring : '  "Associate an image-name and a textual icon to the allowed VC-states - see<br>`ecb-vc-supported-backends". Each element is a cons-cell where the car is the<br>symbol of a supported VC-state and the cdr a 2-element list where the first<br>element is the name of the needed image-icon and the second element the<br>ascii-string which should be dislayed if Emacs doesn"t support image-display.")<br><br>(defsubst ecb-vc-get-image-name-for-vc-state (state)<br>  "Return the associated image-name for the vc-state STATE."',
          prototype : '(defconst ecb-vc-state-icon-alist "((up-to-date . ("vc-up-to-date" "(u)"))                                    (edited . ("vc-edited" "(e)"))                                    (added . ("vc-added" "(a)"))                                    (needs-patch . ("vc-needs-patch" "(p)"))                                    (needs-merge . ("vc-needs-merge" "(m)"))                                    (ignored . ("vc-ignored" "(x)"))                                    (unknown . ("vc-unknown" "(?)"))                                    (nil . ("vc-unknown" "(?)")))',
          lispcode : '(defconst ecb-vc-state-icon-alist <tick>((up-to-date . (<apo>vc-up-to-date<apo> <apo>(u)<apo>))<br>                                    (edited . (<apo>vc-edited<apo> <apo>(e)<apo>))<br>                                    (added . (<apo>vc-added<apo> <apo>(a)<apo>))<br>                                    (needs-patch . (<apo>vc-needs-patch<apo> <apo>(p)<apo>))<br>                                    (needs-merge . (<apo>vc-needs-merge<apo> <apo>(m)<apo>))<br>                                    (ignored . (<apo>vc-ignored<apo> <apo>(x)<apo>))<br>                                    (unknown . (<apo>vc-unknown<apo> <apo>(?)<apo>))<br>                                    (nil . (<apo>vc-unknown<apo> <apo>(?)<apo>)))'
        },
        {
          constant : 'ecb-version',
          filename : 'ecb-upgrade.el',
          lispcode : '(defconst ecb-version <apo>2.51<apo><br>  <apo>Current ECB version.<apo>)'
        },
        {
          constant : 'ecb-windows-hidden-all-value',
          filename : 'ecb-layout.el',
          lispcode : '(defconst ecb-windows-hidden-all-value <tick>all)<br>(defconst ecb-windows-hidden-none-value <tick>none)'
        },
        {
          constant : 'ecb-windows-hidden-none-value',
          filename : 'ecb-layout.el',
          lispcode : '(defconst ecb-windows-hidden-none-value <tick>none)'
        },
        {
          constant : 'tree-node-id-init-value',
          filename : 'tree-buffer.el',
          lispcode : '(defconst tree-node-id-init-value -268435456)'
        }
    ]
  }